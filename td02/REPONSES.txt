TD02

RECAP: 
COMPILATEUR -> Regarde type declaré (Gauche instanciation)
EXECUTION -> Regarde type réelle (Droite instanciation)

Méthode Normal :
Type déclaré -> On regarde le type declaré pour savoir quel objet est en question en paramètre
Type réel -> On regarde le type réel pour savoir où est la méthode 

Méthode statique :
Type déclaré -> On regarde le type declaré pour savoir où est la méthode

Caster quand le type declaré != type réelle

Exercice 1:

1) Le main affiche "42 42 24 24 24 24". 
Les 4 premiers nombres vont afficher la variable meth de leur classe respective (42 pour Mère et
24 pour Fille). Pour les deux derniers nombres, la variable meth va être celle de la fille car 
lors de l'instanciation, le type réel est la fille (Mere mereFille = new Fille();) donc la valeur
variable meth (42) va être ecrasée par la classe fille (24). Même chose lorsqu'on appelle la méthode
printMeth();

2) Dans la classe Fille, on peut accéder aux méthodes meth() de la fille
et de la mère en utilisant le mot clé "super". Dans le main on ne peux accèder 
qu'à une méthode meth() en fonction de l'instanciation.

3) Le main affiche : 
42 : pareil que 1.
42 : pareil que 1.
24 : pareil que 1.
42 : On va dans la méthode printMeth() de la classe mère. Celle-ci va appeler 
la méthode meth() de la classe mère et non de la classe fille car vu que les 
méthodes sont static, c'est la méthode de la classe actuel qui est appelée
par défaut, le type réel de l'instanciation n'est plus pris en compte.
42 : Les méthodes meth() sont statiques alors cela ne va plus regarder le type
réel mais le type declaré donc cela appelle meth() de la classe Mere
42 : On va appeller la méthode printMeth de la classe Mere puis appelé la méthode
meth() de celle-ci aussi. 

4) Le main affiche :
42 : On affiche le champs meth de la classe mère
42 : On va dans la méthode printMeth() de la classe mère et on affiche sa variable
24 : On affiche le champs meth de la classe fille
42 : On va dans la méthode printMeth() de la classe mère et on affiche sa variable
42 : Le champ est référencé par le type declaré donc cela affiche la variable meth
de la classe mère.
42 : On va dans la méthode printMeth() de la classe mère et on affiche sa variable

Exercice 2:

1) FILLE
Erreur sur "private void e()"
-> Une méthode dans une classe fille ne peut pas être moins accessible que une
même methode dans la classe mère lors de la rédéfinition.
Erreur sur "char h()"
-> Une méthode dans une classe fille ne peux pas changer le type de retour que 
celui dans la même méthode dans la classe mère.
Erreur sur "void k() throws Exception"
-> Une méthode dans une classe fille ne peux pas changer le type d'exception que 
celui dans la même méthode dans la classe mère.

MAIN
Erreur sur "mere.miage();"
-> Erreur de compilation, le compilateur regarde le type declaré qui est mère, 
or il n'y a pas de methode miage dans cette classe.

3) Redéfinition : La méthode est exactement pareil que celle dans la classe
mère (Paramètres / Exceptions / Type de Retour / Nom)
   Surcharge : Le nombre de paramètre peut changer dans la méthode de la classe fille

MERE :  c(Mere mere) : Surcharge
FILLE : a() : Redéfinition
        b() : Redéfinition
	c(Mere mere) : Redéfinition
	c(Fille b) : Surcharge
	d() : Redéfinition
	d(Mere mere) : Surcharge
	f() : Redéfinition
	g() : Surcharge
	j() : Redéfinition
        l() : Redéfinition
	m() : Redéfinition

4)
Miage : On appelle la méthode miage() de la classe fille
Miage : Le type réel est la fille dans l'instantiation donc lors de l'execution, on va chercher la méthode miage()
	de la fille. Le type declaré est mère donc il faut un cast de fille pour ne pas
	avoir d'erreur.
Mere_a : On appelle la méthode a() de la classe mère
Fille_a : On appelle la redéfinition de la méthode a() de la classe fille car le type réelle est
	  fille.
Fille_a : On appelle la méthode a() de la classe fille
Fille_a : Le cast ne sert a rien car le type declaré est déjà la mère. Le type réelle est la fille
	  donc on va chercher la méthode a() de la classe fille (qui est rédefinit)
Fille_b(Fille) : Le type réel lors de l'instantiation est fille donc on appelle la méthode c()
		 de la classe fille.
Mere_c : On appelle c() dans la classe fille. Or cette méthode n'est pas rédéfinit ici mais
	 dans la classe mère donc on appelle c() de la classe mère.
Fille_c(Mere) : On appelle c(mere) dans la classe fille. 
Fille_c(Mere) : On appelle mereFille qui est de type réel fille donc la méthode dans cette classe. 
		En paramètre on a merefille qui est de type declaré mère donc l'objet en
		question est mère. Ainsi cela affiche Fille_C(Mere) car mereFille.c(mereFille)
									Type réel(Type declaré)
Fille_c(Mere) : 
Fille_c(Fille) : On appelle la methode c() sur un type réel Fille donc de cette classe. Le
		 paramètre est fille car le type declaré pendant l"instantiation est fille.
static Mere_d : On appelle la methode d() de la classe mère.
static Mere_d : Methode statique donc cela appelle la méthode d() du type declaré donc mère.
Mere_f : Appelle la méthode printF() sur la mère.
Mere_f : On appelle printF() sur une fille. La méthode n'a pas été redéfinit donc on va voir
	 chez la mère. On exécute 
Fille_j : On appelle la méthode j() de la classe fille car c'est le type réel de l'instantiation.
Mere_k : On appelle la méthode k() de la classe fille or cette méthode n'est pas rédéfinit donc on
	 appelle celle de la classe mère.
Fille_l : On appelle la méthode l() de la classe fille car c'est le type réel de l'instantiation.
Fille_m : On appelle la méthode m() de la classe fille car c'est le type réel de l'instantiation.
